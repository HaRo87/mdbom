{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Markdown Software Bill Of Materials's documentation! \u00b6 MdBOM is a Python CLI tool which allows you to take a Software Bill Of Materials (SBOM) file as .json and generate a markdown page presenting it in a more human friendly way.","title":"Overview"},{"location":"#welcome-to-markdown-software-bill-of-materialss-documentation","text":"MdBOM is a Python CLI tool which allows you to take a Software Bill Of Materials (SBOM) file as .json and generate a markdown page presenting it in a more human friendly way.","title":"Welcome to Markdown Software Bill Of Materials's documentation!"},{"location":"bom/","text":"How to generate a BOM \u00b6 You can use a tool like cyclonedx-bom . If you want to find a tool which supports your language and framework, have a look at the CycloneDX tool center . MdBOM can work with the generated BOM.","title":"Software Bill Of Materials"},{"location":"bom/#how-to-generate-a-bom","text":"You can use a tool like cyclonedx-bom . If you want to find a tool which supports your language and framework, have a look at the CycloneDX tool center . MdBOM can work with the generated BOM.","title":"How to generate a BOM"},{"location":"changelog/","text":"Changelog \u00b6 All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning . 0.2.3 - 2022-01-30 \u00b6 Compare with 0.2.2 0.2.2 - 2021-08-31 \u00b6 Compare with 0.2.1 Bug Fixes \u00b6 Checkout fetch depth ( 657635c by HaRo87). 0.2.1 - 2021-08-30 \u00b6 Compare with 0.2.0 0.2.0 - 2021-07-04 \u00b6 Compare with 0.1.1 Features \u00b6 Adding npm as processor ( 8d42255 by Robert Hansel). 0.1.1 - 2021-04-25 \u00b6 Compare with 0.1.0 0.1.0 - 2021-04-25 \u00b6 Compare with first commit","title":"Changelog"},{"location":"changelog/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"changelog/#023-2022-01-30","text":"Compare with 0.2.2","title":"0.2.3 - 2022-01-30"},{"location":"changelog/#022-2021-08-31","text":"Compare with 0.2.1","title":"0.2.2 - 2021-08-31"},{"location":"changelog/#bug-fixes","text":"Checkout fetch depth ( 657635c by HaRo87).","title":"Bug Fixes"},{"location":"changelog/#021-2021-08-30","text":"Compare with 0.2.0","title":"0.2.1 - 2021-08-30"},{"location":"changelog/#020-2021-07-04","text":"Compare with 0.1.1","title":"0.2.0 - 2021-07-04"},{"location":"changelog/#features","text":"Adding npm as processor ( 8d42255 by Robert Hansel).","title":"Features"},{"location":"changelog/#011-2021-04-25","text":"Compare with 0.1.0","title":"0.1.1 - 2021-04-25"},{"location":"changelog/#010-2021-04-25","text":"Compare with first commit","title":"0.1.0 - 2021-04-25"},{"location":"contributing/","text":"Contributing \u00b6 Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. Environment setup \u00b6 Nothing easier! Fork and clone the repository, then: cd mdbom task setup !!! note If it fails for some reason, you'll need to install Poetry manually. You can install it with: ```bash python3 -m pip install --user pipx pipx install poetry ``` Now you can try running `make setup` again, or simply `poetry install`. You now have the dependencies installed. You can run the application with poetry run mdb [ARGS...] . Run task --list to see all the available actions! If you want to know more about a specific task then run task <name> --summary to get a detailed description. Development \u00b6 As usual: create a new branch: git checkout -b feature-or-bugfix-name edit the code and/or the documentation If you updated the documentation or the project dependencies: run task check-docs run task check-code Before committing: run task format to auto-format the code run task check to check everything (fix any warning) run task test to run the tests (fix any issue) follow our commit message convention If you are unsure about how to fix or ignore a warning, just let the continuous integration fail, and we will help you during review. Don't bother updating the changelog, we will take care of this. Commit message convention \u00b6 Commits messages must follow the Angular style : <type>[(scope)]: Subject [Body] Scope and body are optional. Type can be: build : About packaging, building wheels, etc. chore : About packaging or repo/files management. ci : About Continuous Integration. docs : About documentation. feat : New feature. fix : Bug fix. perf : About performance. refactor : Changes which are not features nor bug fixes. style : A change in code style/format. tests : About tests. Subject (and body) must be valid Markdown. If you write a body, please add issues references at the end: Body. References: #10, #11. Fixes #15. Pull requests guidelines \u00b6 Link to any related issue in the Pull Request message. During review, we recommend using fixups: # SHA is the SHA of the commit you want to fix git commit --fixup=SHA Once all the changes are approved, you can squash your commits: git rebase -i --autosquash master And force-push: git push -f If this seems all too complicated, you can push or force-push each new commit, and we will squash them ourselves if needed, before merging.","title":"Contributing"},{"location":"contributing/#contributing","text":"Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.","title":"Contributing"},{"location":"contributing/#environment-setup","text":"Nothing easier! Fork and clone the repository, then: cd mdbom task setup !!! note If it fails for some reason, you'll need to install Poetry manually. You can install it with: ```bash python3 -m pip install --user pipx pipx install poetry ``` Now you can try running `make setup` again, or simply `poetry install`. You now have the dependencies installed. You can run the application with poetry run mdb [ARGS...] . Run task --list to see all the available actions! If you want to know more about a specific task then run task <name> --summary to get a detailed description.","title":"Environment setup"},{"location":"contributing/#development","text":"As usual: create a new branch: git checkout -b feature-or-bugfix-name edit the code and/or the documentation If you updated the documentation or the project dependencies: run task check-docs run task check-code Before committing: run task format to auto-format the code run task check to check everything (fix any warning) run task test to run the tests (fix any issue) follow our commit message convention If you are unsure about how to fix or ignore a warning, just let the continuous integration fail, and we will help you during review. Don't bother updating the changelog, we will take care of this.","title":"Development"},{"location":"contributing/#commit-message-convention","text":"Commits messages must follow the Angular style : <type>[(scope)]: Subject [Body] Scope and body are optional. Type can be: build : About packaging, building wheels, etc. chore : About packaging or repo/files management. ci : About Continuous Integration. docs : About documentation. feat : New feature. fix : Bug fix. perf : About performance. refactor : Changes which are not features nor bug fixes. style : A change in code style/format. tests : About tests. Subject (and body) must be valid Markdown. If you write a body, please add issues references at the end: Body. References: #10, #11. Fixes #15.","title":"Commit message convention"},{"location":"contributing/#pull-requests-guidelines","text":"Link to any related issue in the Pull Request message. During review, we recommend using fixups: # SHA is the SHA of the commit you want to fix git commit --fixup=SHA Once all the changes are approved, you can squash your commits: git rebase -i --autosquash master And force-push: git push -f If this seems all too complicated, you can push or force-push each new commit, and we will squash them ourselves if needed, before merging.","title":"Pull requests guidelines"},{"location":"install/","text":"How to install MdBOM \u00b6 This page describes how to install MdBOM. MdBOM requires Python 3.8 or above. To install Python 3.8, you can use Anaconda . First, you should create a new environment conda create -n mdb python=3.8 Then you need to make sure to activate it conda activate mdb Now you can install MdBOM via pip install mdbom If you want to check your installation you can run mdb info which should produce an output similar to Check the documentation: https://haro87.github.io/mdbom/ for further information.","title":"Installation"},{"location":"install/#how-to-install-mdbom","text":"This page describes how to install MdBOM. MdBOM requires Python 3.8 or above. To install Python 3.8, you can use Anaconda . First, you should create a new environment conda create -n mdb python=3.8 Then you need to make sure to activate it conda activate mdb Now you can install MdBOM via pip install mdbom If you want to check your installation you can run mdb info which should produce an output similar to Check the documentation: https://haro87.github.io/mdbom/ for further information.","title":"How to install MdBOM"},{"location":"license/","text":"MIT License Copyright (c) 2021 Robert Hansel Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"markdown/","text":"How to generate a markdown file \u00b6 You need a template file for generating a markdown file. You can have a look at the examples provided by the MdBOM project. Once you have a template and a BOM you should be able to generate a markdown file via mdb generate --input bom.json --output 3rd-party.md --template template.md.jinja --type pypi This will take the \"bom.json\" file as input, collect all relevant information and use the \"template.md.jinja\" template to generate the \"3rd-party.md\" file. Currently, MdBOM does support the following two BOM types via the \"--type\" option: pypi npm","title":"Markdown Report"},{"location":"markdown/#how-to-generate-a-markdown-file","text":"You need a template file for generating a markdown file. You can have a look at the examples provided by the MdBOM project. Once you have a template and a BOM you should be able to generate a markdown file via mdb generate --input bom.json --output 3rd-party.md --template template.md.jinja --type pypi This will take the \"bom.json\" file as input, collect all relevant information and use the \"template.md.jinja\" template to generate the \"3rd-party.md\" file. Currently, MdBOM does support the following two BOM types via the \"--type\" option: pypi npm","title":"How to generate a markdown file"}]}