name: ci

on:
  push:
    branches: ['*', '*/*']
  pull_request:
    branches: ['*', '*/*']

defaults:
  run:
    shell: bash

env:
  LANG: "en_US.utf-8"
  LC_ALL: "en_US.utf-8"
  POETRY_VIRTUALENVS_IN_PROJECT: "true"
  PYTHONIOENCODING: "UTF-8"

jobs:

  quality:

    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8

    - name: Set up the cache
      uses: actions/cache@v1
      with:
        path: .venv
        key: quality-venv-cache

    - name: Setup Poetry
      uses: Gr1N/setup-poetry@v4

    - name: Setup project
      run: make setup

    - name: Check if the documentation builds correctly
      run: make check-docs

    - name: Check the code quality
      run: make check-code-quality

    - name: Check if the code is correctly typed
      run: make check-types

    - name: Check for vulnerabilities in dependencies
      run: make check-dependencies

  # tests:

  #   strategy:
  #     matrix:
  #       os: [ubuntu-latest, macos-latest, windows-latest]
  #       python-version: [3.8]

  #   runs-on: ${{ matrix.os }}

  #   steps:
  #   - name: Checkout
  #     uses: actions/checkout@v2

  #   - name: Set up Python ${{ matrix.python-version }}
  #     uses: actions/setup-python@v2
  #     with:
  #       python-version: ${{ matrix.python-version }}

  #   # - name: Set up the cache
  #   #   uses: actions/cache@v1
  #   #   with:
  #   #     path: .venv
  #   #     key: tests-venv-cache-${{ matrix.os }}-py${{ matrix.python-version }}

  #   - name: Set up the project
  #     run: |
  #       pip install poetry
  #       poetry install -vvv || { rm -rf .venv; poetry install -vvv; }
  #       poetry update

  #   - name: Run the test suite
  #     run: poetry run duty test
